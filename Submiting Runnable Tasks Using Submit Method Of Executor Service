package ExecuterServiceDemo;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

 class Task implements Runnable{

	@Override
	public void run() {
		System.out.println("Executing task (Thread name)- " + Thread.currentThread().getName());
        try {
            TimeUnit.MILLISECONDS.sleep(500);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
	}
	 
 }
public class ExecutorExp {

	public static void main(String[] args) {
		ExecutorService es=Executors.newFixedThreadPool(2);
		Future<?>f1=es.submit(new Task());
		Future<?>f2=es.submit(new Task());
		Future<?>f3=es.submit(new Task());
		Future<?>f4=es.submit(new Task());
		
		try {
			System.out.println("f1: "+f1.get());
			System.out.println("f2: "+f2.get());
			System.out.println("f3: "+f3.get());
			if(f4.get()==null)
			{
				 System.out.println("submitted task executed successfully");
			}
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		catch (ExecutionException e)
		{
			e.printStackTrace();
		}
		es.shutdown();
	}

}
Output:

Executing task (Thread name)- pool-1-thread-1
Executing task (Thread name)- pool-1-thread-2
Executing task (Thread name)- pool-1-thread-2
Executing task (Thread name)- pool-1-thread-1
f1: null
f2: null
f3: null
submitted task executed successfully
